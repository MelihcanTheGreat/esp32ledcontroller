using UnityEngine;
using UnityEngine.Networking;
using System.Collections;

public class ESP32Controller : MonoBehaviour
{
    // Public variable for the ESP32 IP address, can be set in the Unity Inspector
    public string esp32IP = "http://192.xxx.xxx.xx";

    public void TurnOnLED1()
    {
        StartCoroutine(SendRequest("/LED1/on"));
    }

    public void TurnOffLED1()
    {
        StartCoroutine(SendRequest("/LED1/off"));
    }
    public void TurnOnLED2()
    {
        StartCoroutine(SendRequest("/LED2/on"));
    }

    public void TurnOffLED2()
    {
        StartCoroutine(SendRequest("/LED2/off"));
    }
    public void TurnOnLED3()
    {
        StartCoroutine(SendRequest("/LED3/on"));
    }

    public void TurnOffLED3()
    {
        StartCoroutine(SendRequest("/LED3/off"));
    }
    public void TurnOnLED4()
    {
        StartCoroutine(SendRequest("/LED4/on"));
    }

    public void TurnOffLED4()
    {
        StartCoroutine(SendRequest("/LED4/off"));
    }
    public void TurnOnRelay()
    {
        StartCoroutine(SendRequest("/RELAY/on"));
    }

    public void TurnOffRelay()
    {
        StartCoroutine(SendRequest("/RELAY/off"));
    }


    // Add similar functions for other LEDs and the relay

    IEnumerator SendRequest(string endpoint)
    {
        UnityWebRequest www = UnityWebRequest.Get(esp32IP + endpoint);
        www.timeout = 10; // Increased timeout to 10 seconds for better reliability

        yield return www.SendWebRequest();

        if (www.result != UnityWebRequest.Result.Success)
        {
            Debug.LogError("Error: " + www.error);
            Debug.LogError("URL: " + www.url);
        }
        else
        {
            Debug.Log("Request sent successfully");
            Debug.Log("Response: " + www.downloadHandler.text);
        }
    }
}
